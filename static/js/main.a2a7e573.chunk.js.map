{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","className","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAkFeA,MAhFf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,0BAASA,UAAU,UAAnB,UACE,oBAAIA,UAAU,UAAd,0BACA,sBAAKA,UAAU,OAAf,UACE,0CACA,qIAIA,0CACA,+BACE,qqBAUA,8GACA,qUAMA,gTAOA,gOAMF,+CACA,6BACE,2CAEF,4CA1CF,8CA4CE,2DA5CF,eA8CE,uBACA,uBACA,6BACE,+CAEF,4CAnDF,0DAqDE,0DArDF,mBAuDE,wDAvDF,mFAyDE,uBACA,uBACA,2CACA,uBACA,mBACEA,UAAU,WACVC,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,kCCxDKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.a2a7e573.chunk.js","sourcesContent":["import './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <section className=\"Content\">\n        <h1 className=\"Heading\">Burger Lover</h1>\n        <div className=\"Text\">\n          <h3>Overview</h3>\n          <p>\n            The task represents an application to create ingredients and compile burgers from those\n            ingredients.\n          </p>\n          <h3>Workflow</h3>\n          <ul>\n            <li>\n              As a user, I want to be able to add new ingredients for making burgers. The\n              ingredients should have a name, image (link from the web is acceptable) and the number\n              of calories. As a user I want to add Tags to each ingredient, for example, vegan,\n              gluten-free, etc. to make burgers with specific ingredients only. Once we have all\n              ingredients, as a user I want to be able to view them on a separate ingredients page\n              with the most important information in the list. The list needs to be sortable by\n              calories, and filterable by tags. So if I click on the tag thatâ€™s assigned to that\n              ingredient I will see all the ingredients with the same tag.\n            </li>\n            <li>After we have all of our ingredients as a user I want to make my own burger.</li>\n            <li>\n              When the page for making burgers is opened, the user should be able to name his\n              burger, add a tag to the burger and should see the list of ingredients with a total\n              number of calories. Plus points if the list of ingredients is searchable by name,\n              filterable by tags, and sortable by calories.\n            </li>\n            <li>\n              When a user finishes making his special burger, the created burger should be listed on\n              the burger overview page. Sorting the burgers based on name, calories is also a plus.\n              By clicking on each ingredient or burger from their lists, users should see the\n              details about it.\n            </li>\n\n            <li>\n              When on the burgers or ingredients page, in both lists next to each element should be\n              an edit and delete button, which when it is clicked gives the possibility to edit or\n              delete the item.\n            </li>\n          </ul>\n          <h3>API endpoints</h3>\n          <h5>\n            <em>Burgers</em>\n          </h5>\n          <h5>GET / POST</h5>\n          https://6195607a74c1bd00176c6d1f.mockapi.io\n          <h5> GET BY ID / PUT / DELETE</h5>\n          /burgers/:id\n          <br />\n          <br />\n          <h5>\n            <em>Ingredients</em>\n          </h5>\n          <h5>GET / POST</h5>\n          https://6195607a74c1bd00176c6d1f.mockapi.io/ingredients\n          <h5>GET BY ID / PUT / DELETE</h5>\n          /ingredients/:id\n          <h3>Additional information</h3>\n          Try to focus on providing as much features as possible. Great design is a bonus.\n          <br />\n          <br />\n          <em>Good luck</em>\n          <br />\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}